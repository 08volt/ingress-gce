/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/ingress-gce/pkg/apis/clusterslice/v1"
)

// ClusterSliceLister helps list ClusterSlices.
// All objects returned here must be treated as read-only.
type ClusterSliceLister interface {
	// List lists all ClusterSlices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterSlice, err error)
	// ClusterSlices returns an object that can list and get ClusterSlices.
	ClusterSlices(namespace string) ClusterSliceNamespaceLister
	ClusterSliceListerExpansion
}

// clusterSliceLister implements the ClusterSliceLister interface.
type clusterSliceLister struct {
	indexer cache.Indexer
}

// NewClusterSliceLister returns a new ClusterSliceLister.
func NewClusterSliceLister(indexer cache.Indexer) ClusterSliceLister {
	return &clusterSliceLister{indexer: indexer}
}

// List lists all ClusterSlices in the indexer.
func (s *clusterSliceLister) List(selector labels.Selector) (ret []*v1.ClusterSlice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterSlice))
	})
	return ret, err
}

// ClusterSlices returns an object that can list and get ClusterSlices.
func (s *clusterSliceLister) ClusterSlices(namespace string) ClusterSliceNamespaceLister {
	return clusterSliceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterSliceNamespaceLister helps list and get ClusterSlices.
// All objects returned here must be treated as read-only.
type ClusterSliceNamespaceLister interface {
	// List lists all ClusterSlices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterSlice, err error)
	// Get retrieves the ClusterSlice from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ClusterSlice, error)
	ClusterSliceNamespaceListerExpansion
}

// clusterSliceNamespaceLister implements the ClusterSliceNamespaceLister
// interface.
type clusterSliceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterSlices in the indexer for a given namespace.
func (s clusterSliceNamespaceLister) List(selector labels.Selector) (ret []*v1.ClusterSlice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterSlice))
	})
	return ret, err
}

// Get retrieves the ClusterSlice from the indexer for a given namespace and name.
func (s clusterSliceNamespaceLister) Get(name string) (*v1.ClusterSlice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clusterslice"), name)
	}
	return obj.(*v1.ClusterSlice), nil
}
